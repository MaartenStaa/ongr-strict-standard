<?php

/*
 * This file is part of the ONGR package.
 *
 * (c) NFQ Technologies UAB <info@nfq.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Test;

/**
 * Function use MaartenStaa\OngrStrictStandards\Sniffs\Helper\Comment;Sniff class.
 */
class Function use MaartenStaa\OngrStrictStandards\Sniffs\Helper\Comment;SniffTest
{
    /**
     * Foo.
     *
     * There is a white space after "Foo."
     * Some editors may remove it
     * so if you edit this file check if it is present.
     *
     * @param mixed $bar
     */
    protected function foo($bar)
    {
        foo($bar);
    }

    /**
     *  Bar.
     *
     *  There is a extra white space before "Bar."
     * and this sentence.
     *
     * @param mixed $bar
     */
    protected function bar($bar)
    {
        foo($bar);
    }

    /**
     * Bar.
     *
     * @param mixed $bar
     */
    protected function fooBar($bar)
    {
        foo($bar);
    }

    /**
     * Bar.
     *
     * Foo.
     *
     * @param mixed $bar
     */
    protected function fooBar2($bar)
    {
        foo($bar);
    }

    /**
     * @param mixed $bar
     */
    protected function fooBar3($bar)
    {
        foo($bar);
    }

    /**
     * Bar.
     *
     * @return mixed Correct comment.
     */
    protected function fooBar4()
    {
        return foo($bar);
    }

    /**
     * Bar.
     *
     * @return mixed No full stop
     */
    protected function fooBar5()
    {
        return foo($bar);
    }

    /**
     * Bar.
     *
     * @return mixed first letter non-capital.
     */
    protected function fooBar6()
    {
        return foo($bar);
    }

    /**
     * Bar.
     *
     * @return mixed first letter non-capital, no full stop
     */
    protected function fooBar7()
    {
        return foo($bar);
    }

    /**
     * @inheritdoc
     */
    protected function fooBar7()
    {
        return foo($bar);
    }

    /**
     * Mapping is compared with loaded, if needed updates it and returns true.
     *
     * @param array $types Types to update.
     *
     * @return bool Foo
     *
     * @throws \LogicException
     *
     * @deprecated Will be removed in 1.0. Please now use Bar#foo().
     */
    public function foo(array $types = [])
    {
        return $this->bar($types);
    }

    /**
     * Short description.
     *
     * @deprecated Will be removed in 1.0. Please now use Bar#foo().
     */
    public function updateMapping()
    {
        return $this->updateTypes();
    }

    /**
     * Short description.
     *
     * @deprecated will be removed in 1.0. Please now use Connection#updateTypes()
     */
    public function updateMapping()
    {
        return $this->updateTypes();
    }

    /**
     * @param string $name
     * @param array  $arguments
     */
    public function __call($name, $arguments)
    {
    }

    /**
     * @param string $name
     * @param array  $arguments
     */
    public static function __callStatic($name, $arguments)
    {
    }

    /** */
    public function __clone()
    {
    }

    /** */
    public function __construct()
    {
    }

    /** */
    public function __destruct()
    {
    }

    /**
     * @param string $name
     */
    public function __get($name)
    {
    }

    /** */
    public function __invoke()
    {
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
    }

    /**
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
    }

    /**
     * @param array $an_array
     */
    public static function __set_state($an_array)
    {
    }

    /** */
    public function __sleep()
    {
    }

    /**
     * @return string
     */
    public function __toString()
    {
        return '';
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
    }

    /** */
    public function __wakeup()
    {
    }

    /**
     * Bar.
     *
     * Should report only extra whitespace, and no additional errors about the return comment format.
     *
     * @return mixed
     */
    protected function fooBar8()
    {
        return foo($bar);
    }
}
